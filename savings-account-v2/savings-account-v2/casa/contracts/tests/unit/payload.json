{"smart_contracts": [{"smart_contract_version_id": "1", "code": "# Copyright @ 2020 Thought Machine Group Limited. All rights reserved.\napi = \"3.9.0\"\nversion = \"0.0.1\"\ndisplay_name = \"CASA\"\nsummary = \"Savings Account \"\ntside = Tside.LIABILITY\nsupported_denominations = 'PHP'\nMONTHLY_MAINTENANCE_FEES = 'MONTHLY_MAINTENANCE_FEES'\nACCRUED_INTEREST = 'ACCRUED_INCOMING_INTEREST'\n\nparameters = [\n    #Template Params\n    Parameter(\n        name='denomination',\n        shape=DenominationShape,\n        level=Level.TEMPLATE,\n        description='Default denomination for the contract.',\n        display_name='Default Denomination',\n        update_permission=UpdatePermission.FIXED,\n    ),\n    Parameter(\n        name='fee_tiers',\n        shape=StringShape,\n        level=Level.TEMPLATE,\n        description='The monthly fee rate for this account',\n        display_name='The monthly fee rate for this account',\n    ),\n    Parameter(\n        name='fee_tier_ranges',\n        shape=StringShape,\n        level=Level.TEMPLATE,\n        description='The available fee tiers',\n        display_name='The available fee tiers',\n    ),\n    Parameter(\n        name='internal_account',\n        shape=AccountIdShape,\n        level=Level.TEMPLATE,\n        description='Internal account ID.',\n        display_name='Internal account ID',\n    ),\n    #Instance Params\n    Parameter(\n        name=\"base_interest_rate\",\n        shape=NumberShape(\n            kind=NumberKind.PERCENTAGE\n        ),\n        level=Level.INSTANCE,\n        description=\"Base interest rate given by the bank to the account holder.\",\n        display_name=\"Base Interest Rate\",\n        update_permission=UpdatePermission.OPS_EDITABLE,\n        default_value=Decimal(2)\n    ),\n    Parameter(\n        name=\"bonus_interest_rate\",\n        shape=NumberShape(\n            kind=NumberKind.PERCENTAGE\n        ),\n        level=Level.INSTANCE,\n        description=\"Bonus interest rate given by the bank to the account holder.\",\n        display_name=\"Bonus Interest Rate\",\n        update_permission=UpdatePermission.OPS_EDITABLE,\n        default_value=Decimal(2)\n    ),\n    Parameter(\n        name=\"bonus_interest_amount_threshold\",\n        level=Level.INSTANCE,\n        description=\"Amount threshold for the Bonus Interest to be applied.\",\n        display_name=\"Amount Treshold for Bonus Interest\",\n        update_permission=UpdatePermission.OPS_EDITABLE,\n        shape=NumberShape(\n            kind=NumberKind.MONEY\n        ),\n        default_value=Decimal(1000)\n    ),\n    Parameter(\n        name=\"minimum_balance_maintenance_fee_waive\",\n        level=Level.INSTANCE,\n        description=\"Minimum balance for the monthly maintenance fee to be waived.\",\n        display_name=\"Minimum balance for the monthly maintenance fee to be waived\",\n        update_permission=UpdatePermission.OPS_EDITABLE,\n        shape=NumberShape(\n            kind=NumberKind.MONEY\n        ),\n        default_value=Decimal(1000)\n    ),\n    Parameter(\n        name=\"flat_fee\",\n        level=Level.INSTANCE,\n        description=\"Flat fee to be applied.\",\n        display_name=\"Flat Fee to be applied\",\n        update_permission=UpdatePermission.USER_EDITABLE,\n        shape=NumberShape(\n            kind=NumberKind.MONEY\n        ),\n        default_value=\"0\"\n    )\n]\n\n@requires(parameters=True)\ndef execution_schedules():\n    creation_date = vault.get_account_creation_date()\n    return [\n        (\n            'DAILY_ACCRUE_INTEREST',\n            {\n                'hour': '0',\n                'minute': '0',\n                'second': '1'\n            }\n        ),\n        (\n            'DAILY_APPLY_INTEREST',\n            {\n                'hour': '0',\n                'minute': '0',\n                'second': '5',\n            }\n        ),\n        (\n            'MONTHLY_MAINTENANCE_FEE',\n            {\n                'day': str(creation_date.day),\n                'hour': '0',\n                'minute': '0',\n                'second': '0',\n                'start_date': str((creation_date + timedelta(months=1)).date())\n            }\n        )\n    ]\n\n@requires(event_type='DAILY_ACCRUE_INTEREST', parameters=True, balances=\"1 day\")\n@requires(event_type='DAILY_APPLY_INTEREST', parameters=True, balances=\"1 day\")\n@requires(event_type='MONTHLY_MAINTENANCE_FEE', parameters=True, balances=\"1 day\")\ndef scheduled_code(event_type, effective_date):\n    denomination = vault.get_parameter_timeseries(name='denomination').latest()\n    internal_account = vault.get_parameter_timeseries(name='internal_account').latest()\n\n    if event_type == 'DAILY_ACCRUE_INTEREST':\n        balances = vault.get_balance_timeseries().before(timestamp=effective_date)\n        _accrue_interest(\n            vault, denomination, internal_account, effective_date, balances\n        )\n\n    elif event_type == 'DAILY_APPLY_INTEREST':\n        balances = vault.get_balance_timeseries().latest()\n        _apply_interest(\n            vault, denomination, internal_account, effective_date, balances\n        )\n\n    elif event_type == 'MONTHLY_MAINTENANCE_FEE':\n        balances = vault.get_balance_timeseries().latest()\n        _apply_maintenance_fee(\n            vault, denomination, internal_account, effective_date, balances\n        )\n\n@requires(parameters=True, balances='latest', postings='1 month',)\ndef pre_posting_code(postings, effective_date):\n    denomination = vault.get_parameter_timeseries(name='denomination').latest()\n\n    if any(post.denomination != denomination for post in postings):\n        raise Rejected(\n            'Cannot make transaction in given denominations; '\n            'transactions must be in {}'.format(supported_denominations),\n            reason_code=RejectedReason.WRONG_DENOMINATION,\n            )\n\n    balances = vault.get_balance_timeseries().latest()\n    \n    for post in postings: \n        if post.credit == False: \n            proposed_amount = sum(\n                post.amount for post in postings if post.account_address == DEFAULT_ADDRESS\n                and post.asset == DEFAULT_ASSET\n            )\n\n            total_balances = sum(\n                balance.net for ((address, asset, denomination, phase), balance) in balances.items() if\n                address == DEFAULT_ADDRESS\n            )\n\n            #check for checking withdrawal amount is not greater than the balance\n            if proposed_amount > total_balances:\n                raise Rejected(\n                    'Cannot withdraw proposed amount.', \n                    reason_code=RejectedReason.INSUFFICIENT_FUNDS\n                    )\n            else:\n                None\n        \n\n@requires(\n    parameters=True,\n    flags=True,\n    balances=\"latest live\",\n    postings=\"1 month\",\n)\ndef post_posting_code(postings, effective_date):\n    balances = vault.get_balance_timeseries().latest()\n    denomination = vault.get_parameter_timeseries(name='denomination').latest()\n\n@requires(flags=True, parameters=True)\ndef pre_parameter_change_code(parameters, effective_date):\n    if \"bonus_interest_rate\" in parameters:\n        None\n\n@requires(parameters=True)\ndef post_parameter_change_code(old_parameters, new_parameters, effective_date):\n    None\n\n@requires(parameters=True, balances=\"latest\")\ndef close_code(effective_date):\n    None \n\ndef _accrue_interest(vault, denomination, internal_account, effective_date, balances):\n    hook_execution_id = vault.get_hook_execution_id()\n    effective_balance = balances[\n        (DEFAULT_ADDRESS, DEFAULT_ASSET, denomination, Phase.COMMITTED)\n    ].net\n    daily_rate = vault.get_parameter_timeseries(name='base_interest_rate').latest()\n    interest = effective_balance * _apply_interest_with_bonus(vault, effective_balance, daily_rate)\n    amount_to_accrue = _precision_accrual(interest)\n\n    if amount_to_accrue > 0:\n        posting_ins = vault.make_internal_transfer_instructions(\n            amount=amount_to_accrue,\n            denomination=denomination,\n            client_transaction_id=hook_execution_id + '_DAILY_INTEREST_ACCRUAL',\n            from_account_id=internal_account,\n            from_account_address='ACCRUED_OUTGOING',\n            to_account_id=vault.account_id,\n            to_account_address='ACCRUED_INCOMING_INTEREST',\n            instruction_details={\n                'description': f'Daily interest accrued at {daily_rate} on balance '\n                               f'of {effective_balance}',\n                'event': 'ACCRUE_INTEREST'\n            },\n            asset=DEFAULT_ASSET\n        )\n        vault.instruct_posting_batch(\n            posting_instructions=posting_ins, effective_date=effective_date\n        )\n\ndef _apply_interest_with_bonus(vault, effective_balance, interest):\n    bonus_interest_amount_threshold = vault.get_parameter_timeseries(name=\"bonus_interest_amount_threshold\").latest()\n\n    if effective_balance > bonus_interest_amount_threshold:\n        bonus_interest = vault.get_parameter_timeseries(name=\"bonus_interest_rate\").latest()\n        interest += bonus_interest\n\n    return interest \n\ndef _apply_interest(vault, denomination, internal_account, effective_date, balances):\n    hook_execution_id = vault.get_hook_execution_id()\n    interest_accrued = balances[\n        ('ACCRUED_INCOMING_INTEREST', DEFAULT_ASSET, denomination, Phase.COMMITTED)\n    ].net\n\n    if interest_accrued > 0:\n        posting_ins = vault.make_internal_transfer_instructions(\n                        amount=interest_accrued,\n                        denomination=denomination,\n                        from_account_id=vault.account_id,\n                        from_account_address='ACCRUED_INCOMING_INTEREST',\n                        to_account_id=vault.account_id,\n                        to_account_address=DEFAULT_ADDRESS,\n                        asset=DEFAULT_ASSET,\n                        client_transaction_id=f'APPLY_ACCRUED_INTEREST'\n                                            f'{hook_execution_id}_{denomination}',\n                        instruction_details={\n                            'description': 'Interest Applied',\n                            'event': 'APPLY_ACCRUED_INTEREST'\n                        }\n                    )\n\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount= interest_accrued, \n                denomination=denomination,\n                from_account_id=internal_account,\n                from_account_address=DEFAULT_ADDRESS,\n                to_account_id=vault.account_id,\n                to_account_address='ACCRUED_INTEREST',\n                asset=DEFAULT_ASSET,\n                client_transaction_id=f'APPLY_ACCRUED_INTEREST_{hook_execution_id}_'\n                                    f'{denomination}_CUSTOMER',\n                instruction_details={\n                    'description': 'Interest Applied',\n                    'event': 'APPLY_ACCRUED_INTEREST'\n                }\n            )\n        )\n        vault.instruct_posting_batch(\n                posting_instructions=posting_ins,\n                effective_date=effective_date,\n                client_batch_id=f'APPLY_ACCRUED_INTEREST{hook_execution_id}_'\n                                f'{denomination}'\n            )\n\ndef _precision_accrual(amount):\n    return amount.copy_abs().quantize(Decimal('.0001'), rounding=ROUND_HALF_UP)\n\ndef _apply_maintenance_fee(vault, denomination, internal_account, effective_date, balances):\n    hook_execution_id = vault.get_hook_execution_id()\n    effective_balance = balances[\n        (DEFAULT_ADDRESS, DEFAULT_ASSET, denomination, Phase.COMMITTED)\n    ].net\n    minimum_balance_maintenance_fee_waive = vault.get_parameter_timeseries(name=\"minimum_balance_maintenance_fee_waive\").latest()\n    \n    # raise InvalidContractParameter(\"monthly mean balance: %s\" % _monthly_mean_balance(vault, denomination, effective_date))\n\n    if _monthly_mean_balance(vault, denomination, effective_date) < minimum_balance_maintenance_fee_waive: \n        flat_fee = vault.get_parameter_timeseries(name=\"flat_fee\").latest()\n\n        if flat_fee > 0:\n            posting_ins = vault.make_internal_transfer_instructions(\n                        amount=flat_fee,\n                        denomination=denomination,\n                        from_account_id=vault.account_id,\n                        from_account_address=MONTHLY_MAINTENANCE_FEES,\n                        to_account_id=internal_account,\n                        to_account_address='MONTHLY_FEE_ACCRUED',\n                        asset=DEFAULT_ASSET,\n                        client_transaction_id=f'APPLY_FEE'\n                                            f'{hook_execution_id}_{denomination}',\n                        instruction_details={\n                            'description': f'Monthly Maintenance Fee Applied to Account: {vault.account_id}' ,\n                            'event': 'APPLY_MONTHLY_FEE'\n                        }\n                    )\n\n            posting_ins.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=flat_fee,\n                    denomination=denomination,\n                    from_account_id=vault.account_id,\n                    from_account_address=DEFAULT_ADDRESS,\n                    to_account_id=internal_account,\n                    to_account_address=DEFAULT_ADDRESS  ,\n                    asset=DEFAULT_ASSET,\n                    client_transaction_id=f'APPLY_FEE'\n                                        f'{hook_execution_id}_{denomination}_INTERNAL',\n                    instruction_details={\n                        'description': f'Monthly Maintenance Fee Applied to Account: {vault.account_id}' ,\n                        'event': 'APPLY_MONTHLY_FEE'\n                    }\n                )\n            )\n\n            vault.instruct_posting_batch(\n                posting_instructions=posting_ins,\n                effective_date=effective_date,\n                client_batch_id=f'APPLY_MONTHLY_FEE{hook_execution_id}_')\n                 \n        else: \n            fee_tiers = json_loads(vault.get_parameter_timeseries(name=\"fee_tiers\").latest())\n            fee_tier_ranges = json_loads(vault.get_parameter_timeseries(name=\"fee_tier_ranges\").latest())\n\n            applicable_monthly_fee =_get_tiered_monthly_fee (effective_balance, fee_tiers, fee_tier_ranges)\n\n            posting_ins = vault.make_internal_transfer_instructions(\n                        amount=applicable_monthly_fee,\n                        denomination=denomination,\n                        from_account_id=vault.account_id,\n                        from_account_address=MONTHLY_MAINTENANCE_FEES,\n                        to_account_id=internal_account,\n                        to_account_address='MONTHLY_MAINTENANCE_FEE_ACCRUED',\n                        asset=DEFAULT_ASSET,\n                        client_transaction_id=f'APPLY_FEE'\n                                            f'{hook_execution_id}_{denomination}',\n                        instruction_details={\n                            'description': f'Monthly Maintenance Fee Applied to Account: {vault.account_id}' ,\n                            'event': 'APPLY_MONTHLY_FEE'\n                        }\n                    )\n\n            posting_ins.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=applicable_monthly_fee,\n                    denomination=denomination,\n                    from_account_id=vault.account_id,\n                    from_account_address=DEFAULT_ADDRESS,\n                    to_account_id=internal_account,\n                    to_account_address=DEFAULT_ADDRESS  ,\n                    asset=DEFAULT_ASSET,\n                    client_transaction_id=f'APPLY_FEE'\n                                        f'{hook_execution_id}_{denomination}_INTERNAL',\n                    instruction_details={\n                        'description': f'Monthly Maintenance Fee Applied to Account: {vault.account_id}' ,\n                        'event': 'APPLY_MONTHLY_FEE'\n                    }\n                )\n            )\n\n            vault.instruct_posting_batch(\n                posting_instructions=posting_ins,\n                effective_date=effective_date,\n                client_batch_id=f'APPLY_MONTHLY_FEE{hook_execution_id}_')\n    else:\n        return\n\ndef _get_tiered_monthly_fee(effective_balance, fee_tiers, fee_tier_ranges):\n    tier = None\n    for fee_tier in fee_tier_ranges: \n        bounds = fee_tier_ranges[fee_tier]\n        if bounds['min'] <= effective_balance <= bounds['max']:\n            tier = fee_tier\n    \n    fee = Decimal(fee_tiers[tier])\n    return fee\n\ndef _monthly_mean_balance(vault, denomination, effective_date):\n    creation_date = vault.get_account_creation_date()\n    period_start = effective_date - timedelta(months=1)\n    if period_start < creation_date:\n        period_start += timedelta(days=1)\n    num_days = (effective_date - period_start).days\n    total = sum(\n        [\n            vault.get_balance_timeseries()\n            .at(timestamp=period_start + timedelta(days=i))[\n                (DEFAULT_ADDRESS, DEFAULT_ASSET, denomination, Phase.COMMITTED)\n            ]\n            .net\n            for i in range(num_days)\n        ]\n    )\n    mean_balance = total / num_days\n    return mean_balance", "smart_contract_param_vals": {"denomination": "PHP", "fee_tiers": "{ \"tier1\": \"135\", \"tier2\": \"98\", \"tier3\": \"45\", \"tier4\": \"35\", \"tier5\": \"3\"}", "fee_tier_ranges": "{ \"tier1\": {\"min\": 1000, \"max\": 2999},\"tier2\": {\"min\": 3000, \"max\": 4999},\"tier3\": {\"min\": 5000, \"max\": 7499},\"tier4\": {\"min\": 7500, \"max\": 14999},\"tier5\": {\"min\": 15000, \"max\": 20000}}", "internal_account": "internal_account"}}, {"smart_contract_version_id": "2", "code": "api = '3.6.0'"}], "start_timestamp": "2019-01-01T17:00:00+08:00", "end_timestamp": "2019-02-02T17:00:00+08:00", "instructions": [{"timestamp": "2019-01-01T17:00:00+08:00", "create_account": {"id": "main_account", "product_version_id": "1", "instance_param_vals": {"base_interest_rate": ".002", "bonus_interest_rate": ".005", "bonus_interest_amount_threshold": "3000", "minimum_balance_maintenance_fee_waive": "10000", "flat_fee": "0"}}}, {"timestamp": "2019-01-01T17:00:00+08:00", "create_account": {"id": "internal_account", "product_version_id": "2"}}, {"timestamp": "2019-01-01T17:00:00+08:00", "create_posting_instruction_batch": {"client_id": "Visa", "client_batch_id": "123", "posting_instructions": [{"inbound_hard_settlement": {"amount": "4975", "denomination": "PHP", "target_account": {"account_id": "main_account"}, "internal_account_id": "internal_account"}, "client_transaction_id": "1", "instruction_details": {"description": ""}}], "batch_details": {"description": ""}, "value_timestamp": "2019-01-01T09:00:00+00:00"}}]}